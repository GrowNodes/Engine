# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: Engine

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# plugins:
  # - serverless-plugin-optimize
# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs4.3

# you can overwrite defaults here
#  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  requireAuth:
    handler: require_auth.requireAuth

  msgdb_get:
    handler: msgdb.get
    events:
      - http:
          path: historical/{encoded_topic}
          method: get
          # authorizer: requireAuth

  fcm_attach:
    handler: fcm.attach
    events:
      - http:
          path: fcm/attach
          method: post
          # authorizer: requireAuth
  fcm_detach:
    handler: fcm.detach
    events:
      - http:
          path: fcm/detach
          method: post
          # authorizer: requireAuth

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:  
  Resources:
    MqttLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: mqtt_log
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: message_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: topic
            AttributeType: S
        
        KeySchema:
          - AttributeName: message_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        
        GlobalSecondaryIndexes: 
          - IndexName: "topicGSI"
            KeySchema: 
              - AttributeName: topic
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              NonKeyAttributes: 
                - body
                - message_id
              ProjectionType: INCLUDE
            ProvisionedThroughput: 
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    UserFcmTokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user_fcm_tokens
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S       
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                # - dynamodb:PutItem
              Resource: arn:aws:dynamodb:*:*:table/*
        Roles:
          - Ref: IamRoleLambdaExecution